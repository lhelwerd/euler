"""
PROBLEM:     074
AUTHOR:      Leon Helwerda
STATUS:      done
INTERPRETER: Python 2 or 3
EXPLANATION:
    Number of chains generated by taking the sum of the factorials of the digits
    of the previous number, when starting with numbers below one million, that
    contain exactly sixty non-repeating terms
"""

from past.builtins import xrange as range
from math import factorial
import timeit

def problem():
    fact = [factorial(d) for d in range(10)]
    limit = 10**6
    chains = [0] * limit

    chains[169] = 3
    chains[1454] = 3
    chains[363601] = 3
    chains[871] = 2
    chains[45361] = 2
    chains[872] = 2
    chains[45362] = 2

    for n in range(limit):
        x = n
        seen = []
        while x >= limit or chains[x] == 0:
            seen.append(x)
            x = sum(fact[int(d)] for d in str(x))
            if x == seen[-1]:
                break

        j = len(seen)
        for i, y in enumerate(seen):
            if y < limit:
                chains[y] = chains[x] + j - i

    print(sum(c == 60 for c in chains))

if __name__ == "__main__":
    print(timeit.timeit("problem()", setup="from __main__ import problem",
                        number=1))
