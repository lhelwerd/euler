"""
PROBLEM:     057
AUTHOR:      Leon Helwerda
STATUS:      done
INTERPRETER: Python 2 or 3
EXPLANATION:
    Number of fractional expansions of sqrt(2) which have a numerator with
    more digits than its denominator.
    The numerator is generated by a(0) = 1, a(1) = 1, a(n) = 2 * a(n-1) + a(n-2)
    and the denominator by b(0) = 0, b(1) = 1, b(n) = 2 * b(n-1) + b(n-2).
"""

from builtins import range
import timeit

def problem():
    num1 = 1
    num2 = 1
    den1 = 0
    den2 = 1
    order = 10
    total = 0
    for n in range(1000):
        num1, num2 = num2, 2 * num2 + num1
        den1, den2 = den2, 2 * den2 + den1
        if den2 > order:
            order *= 10
        if num2 > order:
            total += 1

    print(total)

if __name__ == "__main__":
    print(timeit.timeit("problem()", setup="from __main__ import problem",
                        number=1))
